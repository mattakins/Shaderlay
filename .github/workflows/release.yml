name: Release Build

on:
  push:
    tags:
      - 'v*'

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -Dorg.gradle.daemon=false"

jobs:
  release:
    name: Create Release Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in build.gradle.kts
      run: |
        sed -i "s/versionName = \"1.0\"/versionName = \"${{ steps.get_version.outputs.VERSION }}\"/" app/build.gradle.kts

    - name: Decode Keystore
      env:
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$ENCODED_STRING" ]; then
          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
          mkdir -p "${TMP_KEYSTORE_FILE_PATH}"
          echo $ENCODED_STRING | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/release.keystore
        fi

    - name: Build release APK
      run: ./gradlew assembleRelease
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        SIGNING_STORE_FILE: ${{ runner.temp }}/keystore/release.keystore

    - name: Build release AAB
      run: ./gradlew bundleRelease
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        SIGNING_STORE_FILE: ${{ runner.temp }}/keystore/release.keystore

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog between last two tags
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
        fi

        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Shaderlay v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## What's New in v${{ steps.get_version.outputs.VERSION }}

          ${{ steps.release_notes.outputs.CHANGELOG }}

          ## Download

          - **APK**: Download `shaderlay-v${{ steps.get_version.outputs.VERSION }}.apk` for direct installation
          - **AAB**: Download `shaderlay-v${{ steps.get_version.outputs.VERSION }}.aab` for Play Store distribution

          ## Installation

          1. Download the APK file
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK
          4. Grant overlay permissions when prompted
          5. Enjoy system-wide shader effects!

          ## System Requirements

          - Android 8.0 (API 26) or higher
          - OpenGL ES 2.0 support
          - 50MB free storage space

          ## Features

          - System-wide shader overlay using TYPE_APPLICATION_OVERLAY
          - RetroArch slang shader compatibility
          - External shader loading from file system
          - Hardware-accelerated OpenGL ES rendering
          - Performance optimization with shader caching
          - Adjustable opacity and performance modes

        draft: false
        prerelease: false

    - name: Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release.apk
        asset_name: shaderlay-v${{ steps.get_version.outputs.VERSION }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload AAB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/bundle/release/app-release.aab
        asset_name: shaderlay-v${{ steps.get_version.outputs.VERSION }}.aab
        asset_content_type: application/octet-stream

    - name: Upload mapping file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/mapping/release/mapping.txt
        asset_name: mapping-v${{ steps.get_version.outputs.VERSION }}.txt
        asset_content_type: text/plain
      continue-on-error: true